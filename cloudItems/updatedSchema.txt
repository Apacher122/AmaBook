// ENTITY SETS


CREATE TABLE Users(
	user_id 	VARCHAR(10),
    	username 	VARCHAR(30) NOT NULL,
	email 		VARCHAR(40) NOT NULL,
	name 		VARCHAR(40) NOT NULL,
	PRIMARY KEY (user_id),
    	UNIQUE (username)
)

/* subset of Users entity set. We apply overlap and completeness constraints */	
CREATE TABLE Retailers(
	user_id 	VARCHAR(10),
	store_type 	VARCHAR(20),
	PRIMARY KEY (user_id),
	FOREIGN KEY (user_id) REFERENCES Users,
		ON DELETE CASCADE
)

/* subset of Users entity set. We apply overlap and completeness constraints */	
CREATE TABLE Consumers( 
	user_id 	VARCHAR(10),
	size_pref 	VARCHAR(4),
	loyalty_pnts 	INTEGER,
	date_of_birth 	DATE,
	PRIMARY KEY (user_id)
	FOREIGN KEY (user_id) REFERENCES Users,
		ON DELETE CASCADE
)

/* combines Posts entity set and Posted relationship set because of the 
participation and key constraints: every post is made by exactly one user */
CREATE TABLE Posts(
	post_id 		VARCHAR(10),
	post_type		VARCHAR(20),
	user_id			VARCHAR(10) NOT NULL,
	privacy_type		VARCHAR(20),
	date_time		DATE,
	PRIMARY KEY (post_id),
	FOREIGN KEY (user_id) REFERENCES Users
)

CREATE TABLE Addresses(
	street_1	VARCHAR(30),
	street_2	VARCHAR(20),
	city		VARCHAR(30),
	state		VARCHAR(30),
	zip		VARCHAR(5),
	PRIMARY KEY (street_1, street_2, zip)
)

/* combines Orders entity set and Ships_To relationship set because of the
participation and key constraints: every order ships to exactly one
address.
Also combines Orders entity set and Ordered relationship set because each order
is ordered by exactly one user */
CREATE TABLE Orders(
	order_number	VARCHAR(10),
	order_date	DATE,
	status		VARCHAR(20),
	user_id		VARCHAR(10) NOT NULL,
	street_1	VARCHAR(20) NOT NULL,
	street_2	VARCHAR(10) NOT NULL,
	zip		VARCHAR(5) NOT NULL,
	PRIMARY KEY (order_number),
	FOREIGN KEY (user_id) REFERENCES Users,
	FOREIGN KEY (street_1, street_2, zip) REFERENCES Addresses
)

/* combines Products entity set and Sells relationship set because of the
participation and key constraints: every product is sold by exactly one retailer.
In our model, even if two stores sell the same product, they have different
product numbers */
CREATE TABLE Products(
	product_number	VARCHAR(10),
	sold_by		VARCHAR(10) NOT NULL,
	name		VARCHAR(50) NOT NULL,
	color		VARCHAR(30),
	price		REAL CHECK (price > 0),
	description	VARCHAR(300),
	on_sale		BOOLEAN,
	available	BOOLEAN,
	item_type	VARCHAR(30),
	stock		INTEGER CHECK (stock >= 0),
	PRIMARY KEY (product_number),
	FOREIGN KEY (sold_by) REFERENCES Retailers
)

/* combines Review_Posts entity set and Reviews relationship set because of the
participation and key constraints: every review post is associated with exactly
one user. */
CREATE TABLE Review_Posts(
	review_id		VARCHAR(10),
	review_type		VARCHAR(30),
	reviewer		VARCHAR(10) NOT NULL,
	reviewed_product	VARCHAR(10) NOT NULL,
	PRIMARY KEY (review_id),
	FOREIGN KEY (reviewer) REFERENCES Consumers,
	FOREIGN KEY (reviewed_product) REFERENCES Products
)

// Combines Messages entity set with Sends and Receives relationships set because of the
participation and key constraints: every message is sent by exactly one user
and every message is received by exactly one user
CREATE TABLE Messages(
    	session_id	VARCHAR(10),
    	date_time	DATE,
	content		VARCHAR(1000),
	sender		VARCHAR(10) NOT NULL,
	recipient	VARCHAR(10) NOT NULL,
    	PRIMARY KEY (session_id),
	FOREIGN KEY (sender) REFERENCES Users,
	FOREIGN KEY (recipient) REFERENCES Users
)

CREATE TABLE Photos(
	photo_id	VARCHAR(10),
	upload_date	DATE,
	submitted_by	VARCHAR(10) NOT NULL,
	PRIMARY KEY (photo_id),
	FOREIGN KEY (submitted_by) REFERENCES Users
)





// RELATIONSHIP SETS

/* associates reviews with photos that may be included
Note: users can attach more than one photo to a review */
CREATE TABLE Includes_Photo(
	review_id	VARCHAR(10),
	photo_id	VARCHAR(10),
	PRIMARY KEY (review_id, photo_id),
	FOREIGN KEY (review_id) REFERENCES Review_Posts,
	FOREIGN KEY (photo_id) REFERENCES Photos
) 

/* associates photos to products, which are displayed on the site.
Participation constraint between Photos and Products that cannot be modeled:
Every product must have at least one photo associated with it */
CREATE TABLE Pictures(
	photo_id	VARCHAR(10),
	product_number	VARCHAR(10),
	PRIMARY KEY (photo_id, product_number),
	FOREIGN KEY (photo_id) REFERENCES Photos,
	FOREIGN KEY (product_number) REFERENCES Products
)

/* connects users to other users.
Note: If user 1 is connected to user 2, then user 2 is connected to user 1 */
CREATE TABLE Connected_To(
	user_id		VARCHAR(10),
	connection 	VARCHAR(10),
	PRIMARY KEY (user_id, connection),
	FOREIGN KEY (user_id) REFERENCES Users,
	FOREIGN KEY (connection) REFERENCES Users
)

// associates products to users' online shopping carts
CREATE TABLE Has_In_Cart(
	user_id		VARCHAR(10),
	product_number	VARCHAR(10),
	quantity	INTEGER,
	PRIMARY KEY (user_id, product_number),
	FOREIGN KEY (user_id) REFERENCES Users,
	FOREIGN KEY (product_number) REFERENCES Products
)

/* associates users to addresses they have listed.
Participation constraint that cannot be modeled: Every user has at least one address */
CREATE TABLE Lives_At(
	user_id		VARCHAR(10),
	street_1 	VARCHAR(30),
	street_2	VARCHAR(20),
	zip		VARCHAR(5),
	PRIMARY KEY (user_id, street_1, street_2, zip),
	FOREIGN KEY (user_id) REFERENCES Users,
	FOREIGN KEY (street_1, street_2, zip) REFERENCES Addresses
)

/* associates orders to the products they contain.
Participation constraints that cannot be modeled: every order contains at least one item */
CREATE TABLE Contains_Item(
	order_number	VARCHAR(10),
	product_number	VARCHAR(10),
	quantity	INTEGER,
	PRIMARY KEY (order_number, product_number),
	FOREIGN KEY (order_number) REFERENCES Orders,
	FOREIGN KEY (product_number) REFERENCES Products
)



[>:^B|] Mehoy Minoy
